{"ast":null,"code":"import * as THREE from 'three';\n// function random(scaleFactor: number): number {\n//   return Math.random() > 0.5\n//     ? scaleFactor * Math.random()\n//     : -scaleFactor * Math.random();\n// }\nvar MARKER_COLOR = '#fcffbe';\nvar MARKER_COMPANION_COLOR = '#fff9e6';\nexport default function markerRenderer(marker) {\n  var size = Math.max(marker.value / 20, 1);\n  var geometry = new THREE.SphereGeometry(size, 10, 10);\n  var material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(MARKER_COLOR)\n  }); // add light\n  // const mesh = new THREE.Mesh(geometry, material);\n  // const light = new THREE.PointLight(MARKER_COLOR, 1, 0, 0);\n  // mesh.children = [];\n  // mesh.add(light);\n  // add companion markers based on size\n  // const companions: THREE.Mesh[] = [];\n  // for (let i = 0; i < 10; i++) {\n  //   const companionGeometry = new THREE.SphereGeometry(\n  //     Math.min((size * Math.random()) / 2, 1),\n  //     10,\n  //     10,\n  //   );\n  //   const companionMaterial = new THREE.MeshBasicMaterial({\n  //     color: new THREE.Color(MARKER_COMPANION_COLOR),\n  //   });\n  //   const companion = new THREE.Mesh(companionGeometry, companionMaterial);\n  //   companion.lookAt(new THREE.Vector3(0, 0, 0));\n  //   companions.push(companion);\n  //   mesh.add(companion);\n  // }\n  // companions.forEach(\n  //   (companion, i: number): void => {\n  //     function animate(): void {\n  //       const from = {\n  //         opacity: 0.1,\n  //         position: companion.position.clone().toArray(),\n  //         scale: Math.max(0.5, Math.random()),\n  //       };\n  //       const to = {\n  //         opacity: 0.5,\n  //         position: [random(size * 3), random(size * 3), random(size)],\n  //         scale: 0.01,\n  //       };\n  //       const tween = new TWEEN.Tween(from)\n  //         .to(to, 4000)\n  //         .easing(TWEEN.Easing.Quadratic.InOut)\n  //         .delay(i * 200);\n  //       tween\n  //         .on(\n  //           'update',\n  //           (): void => {\n  //             const [x, y, z] = from.position;\n  //             const companionMaterial = companion.material as THREE.MeshBasicMaterial;\n  //             const intensityChange = random(0.05);\n  //             if (\n  //               light.intensity + intensityChange > 0 &&\n  //               light.intensity + intensityChange < 1.5\n  //             ) {\n  //               light.intensity += intensityChange;\n  //             }\n  //             companionMaterial.opacity = from.opacity;\n  //             companion.scale.x = from.scale;\n  //             companion.scale.y = from.scale;\n  //             companion.scale.z = from.scale;\n  //             companion.position.set(x, y, z);\n  //           },\n  //         )\n  //         .on('complete', animate)\n  //         .start();\n  //     }\n  //     animate();\n  //   },\n  // );\n\n  return mesh;\n}","map":{"version":3,"sources":["/Users/richardchea/development/code/covisualize/src/MarkerRenderer.ts"],"names":["THREE","MARKER_COLOR","MARKER_COMPANION_COLOR","markerRenderer","marker","size","Math","max","value","geometry","SphereGeometry","material","MeshBasicMaterial","color","Color","mesh"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA;AACA;AACA;AACA;AACA;AAEA,IAAMC,YAAY,GAAG,SAArB;AACA,IAAMC,sBAAsB,GAAG,SAA/B;AAEA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAwD;AACrE,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,MAAM,CAACI,KAAP,GAAe,EAAxB,EAA4B,CAA5B,CAAb;AACA,MAAMC,QAAQ,GAAG,IAAIT,KAAK,CAACU,cAAV,CAAyBL,IAAzB,EAA+B,EAA/B,EAAmC,EAAnC,CAAjB;AACA,MAAMM,QAAQ,GAAG,IAAIX,KAAK,CAACY,iBAAV,CAA4B;AAC3CC,IAAAA,KAAK,EAAE,IAAIb,KAAK,CAACc,KAAV,CAAgBb,YAAhB;AADoC,GAA5B,CAAjB,CAHqE,CAOrE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOc,IAAP;AACD","sourcesContent":["import * as TWEEN from 'es6-tween';\nimport * as THREE from 'three';\n\nimport { Marker } from 'react-globe';\n\n// function random(scaleFactor: number): number {\n//   return Math.random() > 0.5\n//     ? scaleFactor * Math.random()\n//     : -scaleFactor * Math.random();\n// }\n\nconst MARKER_COLOR = '#fcffbe';\nconst MARKER_COMPANION_COLOR = '#fff9e6';\n\nexport default function markerRenderer(marker: Marker): THREE.Object3D {\n  const size = Math.max(marker.value / 20, 1);\n  const geometry = new THREE.SphereGeometry(size, 10, 10);\n  const material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(MARKER_COLOR),\n  });\n\n  // add light\n  // const mesh = new THREE.Mesh(geometry, material);\n  // const light = new THREE.PointLight(MARKER_COLOR, 1, 0, 0);\n  // mesh.children = [];\n  // mesh.add(light);\n\n  // add companion markers based on size\n  // const companions: THREE.Mesh[] = [];\n  // for (let i = 0; i < 10; i++) {\n  //   const companionGeometry = new THREE.SphereGeometry(\n  //     Math.min((size * Math.random()) / 2, 1),\n  //     10,\n  //     10,\n  //   );\n  //   const companionMaterial = new THREE.MeshBasicMaterial({\n  //     color: new THREE.Color(MARKER_COMPANION_COLOR),\n  //   });\n  //   const companion = new THREE.Mesh(companionGeometry, companionMaterial);\n  //   companion.lookAt(new THREE.Vector3(0, 0, 0));\n  //   companions.push(companion);\n  //   mesh.add(companion);\n  // }\n\n  // companions.forEach(\n  //   (companion, i: number): void => {\n  //     function animate(): void {\n  //       const from = {\n  //         opacity: 0.1,\n  //         position: companion.position.clone().toArray(),\n  //         scale: Math.max(0.5, Math.random()),\n  //       };\n  //       const to = {\n  //         opacity: 0.5,\n  //         position: [random(size * 3), random(size * 3), random(size)],\n  //         scale: 0.01,\n  //       };\n  //       const tween = new TWEEN.Tween(from)\n  //         .to(to, 4000)\n  //         .easing(TWEEN.Easing.Quadratic.InOut)\n  //         .delay(i * 200);\n  //       tween\n  //         .on(\n  //           'update',\n  //           (): void => {\n  //             const [x, y, z] = from.position;\n  //             const companionMaterial = companion.material as THREE.MeshBasicMaterial;\n  //             const intensityChange = random(0.05);\n  //             if (\n  //               light.intensity + intensityChange > 0 &&\n  //               light.intensity + intensityChange < 1.5\n  //             ) {\n  //               light.intensity += intensityChange;\n  //             }\n  //             companionMaterial.opacity = from.opacity;\n  //             companion.scale.x = from.scale;\n  //             companion.scale.y = from.scale;\n  //             companion.scale.z = from.scale;\n  //             companion.position.set(x, y, z);\n  //           },\n  //         )\n  //         .on('complete', animate)\n  //         .start();\n  //     }\n  //     animate();\n  //   },\n  // );\n  return mesh;\n}\n"]},"metadata":{},"sourceType":"module"}